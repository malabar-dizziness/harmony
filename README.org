* harmony

harmony is a load balancing server that distribute request based on the
round robin scheduling algorithm

**** Made with love using BABASHKA

Solution to - https://codingchallenges.fyi/challenges/challenge-load-balancer/


** Goals
- Build a load balancer that can send traffic to two or more servers.

- Health check the servers.

- Handle a server going offline (failing a health check).

- Handle a server coming back online (passing a health check).


** Demo

[[file:/resources/demo.png]]

The left planes of the tmux session are running backend server at port
1010m 1011, 1012 and 1013 respectively

The top right pane is running the load balancing server and the bottom
one is calling the curl command on the load balancing server

The backend server running on 1012 is purposefully stopped to test if
the load balancer handles the servers being down situation.

As you can see in the load balancing server's log, when the server was
down, it promptly forwarded to the next port rather than giving status
500 as the response



** Usage

Start the load balancing server:

#+BEGIN_SRC bash
  ./src/harmony/load_balancer.bb
#+End_SRC

This will start the load balancing server on port 80 by default

Now, start multiple backend server on port : 1010, 1011, 1012 and 1013

#+BEGIN_SRC bash
  ./src/harmony/be.bb <port-number>
#+End_SRC

NOTE: Currently load balancing server only checks and distribute request
to backend servers running on port 1010, 1011, 1012, and 1013. This can
be changed to make it dynmaic in the future.

Make GET request on host: `127.0.0.1` and port `80`.

#+BEGIN_SRC bash
  curl http://localhost:80
#+end_src

To play around start REPL at the project root directory

#+BEGIN_SRC bash
  bb nrepl-server 7888
#+EDN_SRC

The load balancer will distribute the request each of the servers
using round robin algorithm
